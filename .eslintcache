[{"/var/www/html/fiverr_frontend/src/reportWebVitals.js":"1","/var/www/html/fiverr_frontend/src/routes/index.js":"2","/var/www/html/fiverr_frontend/src/api/request/request.ts":"3","/var/www/html/fiverr_frontend/src/api/request/header.ts":"4","/var/www/html/fiverr_frontend/src/api/config/fetch.config.ts":"5","/var/www/html/fiverr_frontend/src/lib/http/request.ts":"6","/var/www/html/fiverr_frontend/src/lib/http/header/compose.ts":"7","/var/www/html/fiverr_frontend/src/lib/http/header/header.ts":"8","/var/www/html/fiverr_frontend/src/lib/http/mime/mime.ts":"9","/var/www/html/fiverr_frontend/src/lib/http/exception/error.exception.ts":"10","/var/www/html/fiverr_frontend/src/lib/http/exception/http.exception.factory.ts":"11","/var/www/html/fiverr_frontend/src/lib/http/exception/http.exception.ts":"12","/var/www/html/fiverr_frontend/src/api/routing/routes/dashboard.ts":"13","/var/www/html/fiverr_frontend/src/api/routing/url.ts":"14","/var/www/html/fiverr_frontend/src/api/config/route.config.ts":"15","/var/www/html/fiverr_frontend/src/lib/location/query.string.ts":"16","/var/www/html/fiverr_frontend/src/containers/main/main.tsx":"17","/var/www/html/fiverr_frontend/src/containers/login/login.tsx":"18","/var/www/html/fiverr_frontend/src/containers/signup/signup.tsx":"19","/var/www/html/fiverr_frontend/src/containers/search/search.tsx":"20","/var/www/html/fiverr_frontend/src/containers/categories/categories.tsx":"21","/var/www/html/fiverr_frontend/src/containers/sellers/sellers.tsx":"22","/var/www/html/fiverr_frontend/src/containers/services/services.tsx":"23","/var/www/html/fiverr_frontend/src/containers/layout/layout.tsx":"24","/var/www/html/fiverr_frontend/src/components/service/service.tsx":"25","/var/www/html/fiverr_frontend/src/containers/navbar/navbar.tsx":"26","/var/www/html/fiverr_frontend/src/containers/service/service.tsx":"27","/var/www/html/fiverr_frontend/src/components/seller/seller.tsx":"28","/var/www/html/fiverr_frontend/src/components/image/image.tsx":"29","/var/www/html/fiverr_frontend/src/components/search/search.tsx":"30","/var/www/html/fiverr_frontend/src/index.tsx":"31","/var/www/html/fiverr_frontend/src/store/store.factory.ts":"32","/var/www/html/fiverr_frontend/src/app.tsx":"33","/var/www/html/fiverr_frontend/src/duck/_root/root.reducer.ts":"34","/var/www/html/fiverr_frontend/src/duck/_root/root.saga.ts":"35","/var/www/html/fiverr_frontend/src/duck/entity/entity.middleware.ts":"36","/var/www/html/fiverr_frontend/src/duck/entity/entity.action.ts":"37","/var/www/html/fiverr_frontend/src/duck/app/app.reducer.ts":"38","/var/www/html/fiverr_frontend/src/duck/app/app.saga.ts":"39","/var/www/html/fiverr_frontend/src/duck/app/app.action.ts":"40","/var/www/html/fiverr_frontend/src/duck/app/app.state.ts":"41","/var/www/html/fiverr_frontend/src/duck/entity/entity.reducer.ts":"42","/var/www/html/fiverr_frontend/src/duck/entity/entity.state.ts":"43","/var/www/html/fiverr_frontend/src/duck/entity/entity.model.ts":"44","/var/www/html/fiverr_frontend/src/duck/auth/auth.reducer.ts":"45","/var/www/html/fiverr_frontend/src/duck/auth/auth.action.ts":"46","/var/www/html/fiverr_frontend/src/duck/auth/auth.state.ts":"47","/var/www/html/fiverr_frontend/src/duck/entity/entity.schema.ts":"48","/var/www/html/fiverr_frontend/src/duck/auth/auth.saga.ts":"49","/var/www/html/fiverr_frontend/src/api/api/account/info.ts":"50","/var/www/html/fiverr_frontend/src/api/exception/index.ts":"51","/var/www/html/fiverr_frontend/src/duck/auth/auth.selector.ts":"52","/var/www/html/fiverr_frontend/src/duck/app/app.selector.ts":"53","/var/www/html/fiverr_frontend/src/duck/auth/model/authorized.user.ts":"54","/var/www/html/fiverr_frontend/src/duck/entity/selector/user.account.ts":"55","/var/www/html/fiverr_frontend/src/duck/entity/selector/_entity.ts":"56","/var/www/html/fiverr_frontend/src/duck/auth/hooks/useLogout.ts":"57","/var/www/html/fiverr_frontend/src/containers/dashboard/dashboard.tsx":"58","/var/www/html/fiverr_frontend/src/containers/dashboard/inbox.tsx":"59","/var/www/html/fiverr_frontend/src/containers/dashboard/orders.tsx":"60","/var/www/html/fiverr_frontend/src/containers/dashboard/earnings.tsx":"61","/var/www/html/fiverr_frontend/src/api/exception/validation/validation.exception.ts":"62","/var/www/html/fiverr_frontend/src/api/model/media.ts":"63","/var/www/html/fiverr_frontend/src/typings.d.ts":"64","/var/www/html/fiverr_frontend/src/components/service/service.short.tsx":"65","/var/www/html/fiverr_frontend/src/components/offer/offer.tsx":"66","/var/www/html/fiverr_frontend/src/api/exception/validation/validation.exception.factory.ts":"67","/var/www/html/fiverr_frontend/src/containers/dashboard/order/order.tsx":"68"},{"size":362,"mtime":1609683422261,"results":"69","hashOfConfig":"70"},{"size":753,"mtime":1623480331232,"results":"71","hashOfConfig":"70"},{"size":988,"mtime":1621348465341,"results":"72","hashOfConfig":"70"},{"size":297,"mtime":1597315550000,"results":"73","hashOfConfig":"70"},{"size":88,"mtime":1597315550000,"results":"74","hashOfConfig":"70"},{"size":543,"mtime":1597315556000,"results":"75","hashOfConfig":"70"},{"size":330,"mtime":1597315556000,"results":"76","hashOfConfig":"70"},{"size":203,"mtime":1597315556000,"results":"77","hashOfConfig":"70"},{"size":100,"mtime":1598871471000,"results":"78","hashOfConfig":"70"},{"size":90,"mtime":1597315556000,"results":"79","hashOfConfig":"70"},{"size":1205,"mtime":1597315556000,"results":"80","hashOfConfig":"70"},{"size":1604,"mtime":1613120144132,"results":"81","hashOfConfig":"70"},{"size":1289,"mtime":1622704047948,"results":"82","hashOfConfig":"70"},{"size":119,"mtime":1597315550000,"results":"83","hashOfConfig":"70"},{"size":79,"mtime":1597315550000,"results":"84","hashOfConfig":"70"},{"size":471,"mtime":1619992938075,"results":"85","hashOfConfig":"70"},{"size":570,"mtime":1620474080635,"results":"86","hashOfConfig":"70"},{"size":3160,"mtime":1622703470532,"results":"87","hashOfConfig":"70"},{"size":3028,"mtime":1623480455460,"results":"88","hashOfConfig":"70"},{"size":2892,"mtime":1622998470988,"results":"89","hashOfConfig":"70"},{"size":970,"mtime":1621328047888,"results":"90","hashOfConfig":"70"},{"size":1074,"mtime":1621788773507,"results":"91","hashOfConfig":"70"},{"size":2026,"mtime":1622998470968,"results":"92","hashOfConfig":"70"},{"size":599,"mtime":1622020214272,"results":"93","hashOfConfig":"70"},{"size":962,"mtime":1622998410900,"results":"94","hashOfConfig":"70"},{"size":1787,"mtime":1623751756231,"results":"95","hashOfConfig":"70"},{"size":9331,"mtime":1622711169749,"results":"96","hashOfConfig":"70"},{"size":734,"mtime":1621788773499,"results":"97","hashOfConfig":"70"},{"size":1065,"mtime":1623000402456,"results":"98","hashOfConfig":"70"},{"size":1181,"mtime":1620646674995,"results":"99","hashOfConfig":"70"},{"size":713,"mtime":1622630593181,"results":"100","hashOfConfig":"70"},{"size":885,"mtime":1621148087564,"results":"101","hashOfConfig":"70"},{"size":3818,"mtime":1624006134856,"results":"102","hashOfConfig":"70"},{"size":376,"mtime":1621148541440,"results":"103","hashOfConfig":"70"},{"size":158,"mtime":1597315555000,"results":"104","hashOfConfig":"70"},{"size":810,"mtime":1598871471000,"results":"105","hashOfConfig":"70"},{"size":670,"mtime":1597315554000,"results":"106","hashOfConfig":"70"},{"size":500,"mtime":1597315555000,"results":"107","hashOfConfig":"70"},{"size":527,"mtime":1621238611954,"results":"108","hashOfConfig":"70"},{"size":228,"mtime":1597315555000,"results":"109","hashOfConfig":"70"},{"size":150,"mtime":1597315555000,"results":"110","hashOfConfig":"70"},{"size":1069,"mtime":1597315554000,"results":"111","hashOfConfig":"70"},{"size":146,"mtime":1597315554000,"results":"112","hashOfConfig":"70"},{"size":75,"mtime":1597315554000,"results":"113","hashOfConfig":"70"},{"size":558,"mtime":1597315554000,"results":"114","hashOfConfig":"70"},{"size":688,"mtime":1621241189690,"results":"115","hashOfConfig":"70"},{"size":150,"mtime":1597315554000,"results":"116","hashOfConfig":"70"},{"size":106,"mtime":1621328178764,"results":"117","hashOfConfig":"70"},{"size":1117,"mtime":1621772007768,"results":"118","hashOfConfig":"70"},{"size":869,"mtime":1621772048984,"results":"119","hashOfConfig":"70"},{"size":56,"mtime":1597315550000,"results":"120","hashOfConfig":"70"},{"size":857,"mtime":1621792269979,"results":"121","hashOfConfig":"70"},{"size":424,"mtime":1597315555000,"results":"122","hashOfConfig":"70"},{"size":218,"mtime":1621327842372,"results":"123","hashOfConfig":"70"},{"size":371,"mtime":1621328092452,"results":"124","hashOfConfig":"70"},{"size":770,"mtime":1621328025880,"results":"125","hashOfConfig":"70"},{"size":911,"mtime":1621772487200,"results":"126","hashOfConfig":"70"},{"size":260,"mtime":1621787990511,"results":"127","hashOfConfig":"70"},{"size":15788,"mtime":1623754278643,"results":"128","hashOfConfig":"70"},{"size":2060,"mtime":1624018547420,"results":"129","hashOfConfig":"70"},{"size":256,"mtime":1621789573007,"results":"130","hashOfConfig":"70"},{"size":640,"mtime":1621791075575,"results":"131","hashOfConfig":"70"},{"size":169,"mtime":1620479057159,"results":"132","hashOfConfig":"70"},{"size":176,"mtime":1622631889053,"results":"133","hashOfConfig":"70"},{"size":1135,"mtime":1623001812884,"results":"134","hashOfConfig":"70"},{"size":3481,"mtime":1624005178612,"results":"135","hashOfConfig":"70"},{"size":657,"mtime":1620025671220,"results":"136","hashOfConfig":"70"},{"size":1160,"mtime":1624016476448,"results":"137","hashOfConfig":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},"iua207",{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"145"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"145"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"145"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"145"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"145"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"145"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"145"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"145"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"145"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"145"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"145"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"277"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"145"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/var/www/html/fiverr_frontend/src/reportWebVitals.js",[],["289","290"],"/var/www/html/fiverr_frontend/src/routes/index.js",[],"/var/www/html/fiverr_frontend/src/api/request/request.ts",[],["291","292"],"/var/www/html/fiverr_frontend/src/api/request/header.ts",[],"/var/www/html/fiverr_frontend/src/api/config/fetch.config.ts",[],"/var/www/html/fiverr_frontend/src/lib/http/request.ts",[],"/var/www/html/fiverr_frontend/src/lib/http/header/compose.ts",[],"/var/www/html/fiverr_frontend/src/lib/http/header/header.ts",[],"/var/www/html/fiverr_frontend/src/lib/http/mime/mime.ts",[],"/var/www/html/fiverr_frontend/src/lib/http/exception/error.exception.ts",[],"/var/www/html/fiverr_frontend/src/lib/http/exception/http.exception.factory.ts",[],"/var/www/html/fiverr_frontend/src/lib/http/exception/http.exception.ts",[],"/var/www/html/fiverr_frontend/src/api/routing/routes/dashboard.ts",[],"/var/www/html/fiverr_frontend/src/api/routing/url.ts",[],"/var/www/html/fiverr_frontend/src/api/config/route.config.ts",[],"/var/www/html/fiverr_frontend/src/lib/location/query.string.ts",[],"/var/www/html/fiverr_frontend/src/containers/main/main.tsx",["293","294"],"import React from 'react';\nimport { Col, Container, Row } from 'reactstrap';\nimport Categories from '../categories/categories';\nimport Navigation from '../navbar/navbar';\nimport Sellers from '../sellers/sellers';\nimport Services from '../services/services';\nimport Layout from \"../layout/layout\";\n\n\nconst Main = () => {\n  return (\n    <Layout>\n      <Row>\n        <Col xs={12} lg={3}>\n          <Categories />\n        </Col>\n        <Col xs={12} lg={9}>\n          <Services />\n          <Sellers />\n        </Col>\n      </Row>\n    </Layout>\n  );\n};\n\nexport default Main;","/var/www/html/fiverr_frontend/src/containers/login/login.tsx",["295","296","297"],"import React, {useCallback, useState} from 'react';\nimport {\n    Card, CardBody,\n    CardTitle, Button, Form, FormGroup, Input\n} from 'reactstrap';\nimport Layout from \"../layout/layout\";\nimport {LOGIN} from \"../../api/routing/routes/dashboard\";\nimport {jsonRequest} from \"../../api/request/request\";\nimport {useDispatch} from \"react-redux\";\nimport {userAuthenticated} from \"../../duck/auth/auth.action\";\nimport {useForm} from \"react-hook-form\";\nimport {useHistory} from \"react-router\";\nimport {DASHBOARD} from \"../../routes\";\n\n\nconst Login = () => {\n\n    const [isLoggedIn, setLoggedIn] = useState(false);\n    const [errorMessage, setErrorMessage] = useState<string|undefined>(undefined);\n    const [isLoading, setLoading] = useState(false);\n\n    const dispatch = useDispatch();\n    const {register, handleSubmit} = useForm();\n\n    const submitForm = useCallback((values: any) => {\n        setLoading(true);\n        setErrorMessage(undefined);\n        const requestOptions = {\n            method: 'POST',\n            body: JSON.stringify({username: values.username, password: values.password})\n        };\n\n        jsonRequest(LOGIN, requestOptions)\n        .then(response => response.json())\n        .then(json => {\n            setLoggedIn(true);\n            dispatch(userAuthenticated(json.user));\n        }).catch(async (err) => {\n            let errorResponse = await err.response.json();\n            setErrorMessage(errorResponse.message);\n        }).finally(() => {\n            setLoading(false);\n        });\n\n    }, []);\n\n    return (\n        <Layout>\n            <div>\n                <Card>\n                    <CardBody className=\"container\">\n                        <CardTitle tag=\"h5\"> Sign In to {process.env.REACT_APP_WEBSITE_NAME} </CardTitle>\n                        {errorMessage !== undefined && (\n                            <div className=\"alert alert-danger\">{errorMessage}</div>\n                        )}\n\n                        {isLoggedIn && (\n                            <div className=\"alert alert-success\">Login was successful</div>\n                        )}\n\n                        <Form onSubmit={handleSubmit(submitForm)}>\n                            <FormGroup>\n                                <Input\n                                    type=\"text\"\n                                    {...register('username')}\n                                    id=\"username\"\n                                    placeholder=\"User Name\"\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Input\n                                    type=\"password\"\n                                    {...register('password')}\n                                    id=\"examplePassword\"\n                                    placeholder=\"Password\"\n                                />\n                            </FormGroup>\n                            <Button type=\"submit\" disabled={isLoading}>Submit</Button>\n                        </Form>\n                    </CardBody>\n                </Card>\n            </div>\n        </Layout>\n    );\n};\n\nexport default Login;","/var/www/html/fiverr_frontend/src/containers/signup/signup.tsx",["298","299","300"],"import React, { useState } from 'react';\nimport {\n  Card, CardBody,\n  CardTitle, Button, Form, FormGroup, Input\n} from 'reactstrap';\nimport Layout from \"../layout/layout\";\nimport {jsonRequest} from \"../../api/request/request\";\nimport {CATEGORIES_LIST, REGISTER} from \"../../api/routing/routes/dashboard\";\nimport {useForm} from \"react-hook-form\";\n\nconst Signup = () => {\n\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [username, setUserName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  \n  const {handleSubmit, register} = useForm();\n\n  const submitForm = () => {\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ firstName, lastName, username, email, password })\n    };\n\n    jsonRequest(REGISTER, requestOptions)\n        .then(response => response.json())\n        .then(json => {});\n  };\n\n  return (\n    <Layout>\n      <div>\n        <Card>\n          <CardBody className=\"container\">\n            <CardTitle tag=\"h5\"> Create Your Account</CardTitle>\n            <Form>\n              <FormGroup>\n                <Input\n                  type=\"text\"\n                  name=\"firstname\"\n                  id=\"firstname\"\n                  placeholder=\"First Name\"\n                  value={firstName}\n                  onChange={(e) => setFirstName(e.target.value)}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  type=\"text\"\n                  name=\"lastname\"\n                  id=\"lastname\"\n                  placeholder=\"Last Name\"\n                  value={lastName}\n                  onChange={(e) => setLastName(e.target.value)}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  type=\"text\"\n                  name=\"username\"\n                  id=\"username\"\n                  placeholder=\"User Name\"\n                  value={username}\n                  onChange={(e) => setUserName(e.target.value)}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"exampleEmail\"\n                  placeholder=\"Email/User Name\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  type=\"password\"\n                  name=\"Password\"\n                  id=\"examplePassword\"\n                  placeholder=\"Password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                />\n              </FormGroup>\n              <Button onClick={submitForm}>Signup</Button>\n            </Form>\n          </CardBody>\n        </Card>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Signup;","/var/www/html/fiverr_frontend/src/containers/search/search.tsx",["301","302","303","304","305","306"],"import React, {useState, useEffect, useMemo, FunctionComponent} from \"react\";\nimport Layout from \"../layout/layout\";\nimport {jsonRequest} from \"../../api/request/request\";\nimport {SERVICES_LIST} from \"../../api/routing/routes/dashboard\";\nimport {Col, Row} from \"reactstrap\";\nimport Categories from \"../categories/categories\";\nimport Services from \"../services/services\";\nimport Sellers from \"../sellers/sellers\";\nimport Service from \"../../components/service/service\";\nimport {Service as ServiceModel} from '../../api/model/service';\nimport {RouteComponentProps, useLocation} from \"react-router\";\nimport {QueryString} from \"../../lib/location/query.string\";\nimport FormGroup from \"reactstrap/es/FormGroup\";\nimport {Input} from \"reactstrap/es\";\nimport {Search as SearchBar} from \"../../components/search/search\";\nimport {Link} from \"react-router-dom\";\nimport {SERVICE_ROUTE} from \"../../routes\";\n\nexport interface SearchProps{}\n\nexport interface RequestProps{\n  s?: string;\n  limit?: string;\n  offset?: string;\n  orderBy?: string;\n  orderMode?: string;\n  categories?: string[];\n  minPrice?: string;\n  maxPrice?: string;\n}\n\nconst Search: FunctionComponent<SearchProps> = (props) => {\n  const [services, setServices] = useState<ServiceModel[]>([]);\n\n  const location = useLocation();\n\n  const searchParams = useMemo(() => {\n    return QueryString.parse(location.search);\n  }, [location.search]);\n\n  const loadServices = async () => {\n    let queryString = QueryString.stringify(searchParamsToRequestParams(searchParams));\n    let response, list;\n    try {\n      response = await jsonRequest(`${SERVICES_LIST}?${queryString}`);\n      list = await response.json();\n    }catch(exception){\n      console.log(exception);\n    }\n\n    setServices(list.list);\n  };\n\n  const searchParamsToRequestParams = (values: any) => {\n    let data: RequestProps = {\n      s: values.s,\n      limit: values.limit,\n      offset: values.offset,\n      orderBy: values.orderBy,\n      orderMode: values.orderMode,\n      categories: values.categoryId,\n      minPrice: values.minPrice,\n      maxPrice: values.maxPrice\n    };\n\n    return data;\n  };\n\n  useEffect(() => {\n    loadServices();\n  }, [searchParams]);\n\n  return (\n    <Layout>\n      <Row>\n        <Col xs={12} lg={3}>\n          <Categories />\n        </Col>\n        <Col xs={12} lg={9}>\n          <Row>\n            <Col lg={12}>\n              <SearchBar />\n            </Col>\n          </Row>\n          <Row>\n            {services.map((service, index) => {\n              return (\n                <Col xs={12} lg={4} key={index}>\n                  <Link to={SERVICE_ROUTE.replace(':id', service.id.toString())} style={{textDecoration: 'none'}}>\n                    <Service service={service} />\n                  </Link>\n                </Col>\n              );\n            })}\n          </Row>\n        </Col>\n      </Row>\n    </Layout>\n  );\n};\n\nexport default Search;","/var/www/html/fiverr_frontend/src/containers/categories/categories.tsx",["307","308"],"import React, {useState, useEffect} from 'react';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\nimport {jsonRequest} from \"../../api/request/request\";\nimport {CATEGORIES_LIST, SERVICES_LIST} from \"../../api/routing/routes/dashboard\";\nimport {SEARCH_ROUTE} from \"../../routes\";\nimport {Link} from \"react-router-dom\";\nimport {Category} from \"../../api/model/category\";\n\nconst Categories = () => {\n  const [categories, setCategories] = useState<Category[]>([]);\n\n  const loadCategories = () => {\n    jsonRequest(CATEGORIES_LIST)\n      .then(response => response.json())\n      .then(json => {\n        setCategories(json.list);\n      });\n  };\n\n  useEffect(() => {\n    loadCategories();\n  }, []);\n\n\n  return (\n    <ListGroup>\n      {categories.map((cat, index) => (\n        <Link to={`${SEARCH_ROUTE}?categoryId[]=${cat.id}`} className=\"list-group-item\" key={index}>\n          {cat.name}\n        </Link>\n      ))}\n    </ListGroup>\n  );\n};\n\nexport default Categories;\n","/var/www/html/fiverr_frontend/src/containers/sellers/sellers.tsx",[],"/var/www/html/fiverr_frontend/src/containers/services/services.tsx",["309","310"],"import React, {useEffect, useState} from 'react';\nimport Carousel from 'react-multi-carousel';\nimport 'react-multi-carousel/lib/styles.css';\nimport {\n    FormGroup, Input, Row, Col\n} from 'reactstrap';\nimport Service from '../../components/service/service';\nimport {Service as ServiceModel} from \"../../api/model/service\";\nimport {jsonRequest} from \"../../api/request/request\";\nimport {FEATURED_SERVICES_LIST} from \"../../api/routing/routes/dashboard\";\nimport {Search as SearchBar} from '../../components/search/search';\n\nconst Services = () => {\n    const responsive = {\n        superLargeDesktop: {\n            // the naming can be any, depends on you.\n            breakpoint: { max: 4000, min: 3000 },\n            items: 5\n        },\n        desktop: {\n            breakpoint: { max: 3000, min: 1024 },\n            items: 3\n        },\n        tablet: {\n            breakpoint: { max: 1024, min: 464 },\n            items: 2\n        },\n        mobile: {\n            breakpoint: { max: 464, min: 0 },\n            items: 1\n        }\n    };\n\n    const [services, setServices] = useState<ServiceModel[]>([]);\n\n    const loadServices = async () => {\n        let response, list;\n        try {\n            response = await jsonRequest(`${FEATURED_SERVICES_LIST}`);\n            list = await response.json();\n        }catch(exception){\n            console.log(exception);\n        }\n\n        setServices(list.list);\n    };\n\n    useEffect(() => {\n        loadServices();\n    }, []);\n\n    return (\n        <React.Fragment>\n\n            <Row>\n                <Col lg={12}>\n                    <SearchBar />\n                </Col>\n            </Row>\n            <h3>Featured services</h3>\n            <Row>\n                <Col>\n                    <Carousel responsive={responsive}>\n                        {services.map((service, index) => {\n                            return (\n                                <Service key={index} service={service} />\n                            );\n                        })}\n                    </Carousel>\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default Services;","/var/www/html/fiverr_frontend/src/containers/layout/layout.tsx",[],"/var/www/html/fiverr_frontend/src/components/service/service.tsx",[],"/var/www/html/fiverr_frontend/src/containers/navbar/navbar.tsx",["311"],"import React, {useState} from 'react';\nimport {Button, Collapse, Navbar, NavbarToggler} from 'reactstrap';\nimport {Link} from \"react-router-dom\";\nimport {DASHBOARD, EARNINGS, INBOX, LOGIN, ORDERS, SIGNUP} from \"../../routes\";\nimport {useSelector} from \"react-redux\";\nimport {getAuthorizedUser} from \"../../duck/auth/auth.selector\";\nimport {useLogout} from \"../../duck/auth/hooks/useLogout\";\n\n\nconst Navigation = () => {\n  \n  const getUser = useSelector(getAuthorizedUser);\n  \n  const [isOpen, setIsOpen] = useState(false);\n  \n  const toggle = () => setIsOpen(!isOpen);\n  \n  const [logoutState, logoutAction] = useLogout();\n  \n  \n  return (\n    <div className=\"navigation\">\n      <Navbar color=\"light\" light expand=\"md\">\n        <Link className=\"navbar-brand\" to={\"/\"}>{process.env.REACT_APP_WEBSITE_NAME}</Link>\n        <NavbarToggler onClick={toggle}/>\n        <Collapse isOpen={isOpen} navbar className=\"justify-content-end navbar-nav\">\n          {getUser === null ? (\n            <>\n              <Link className=\"nav-item nav-link\" to={LOGIN}>Login</Link>\n              <Link className=\"nav-item nav-link\" to={SIGNUP}>Signup</Link>\n            </>\n          ) : (\n            <>\n              <Link className=\"nav-item nav-link\" to={DASHBOARD}>Dashboard</Link>\n              <Link className=\"nav-item nav-link\" to={INBOX}>Inbox</Link>\n              <Link className=\"nav-item nav-link\" to={ORDERS}>Orders</Link>\n              <Link className=\"nav-item nav-link\" to={EARNINGS}>Earnings</Link>\n              <Link className=\"nav-item nav-link\" to=\"#\">({getUser.displayName})</Link>\n              <Button color=\"danger\" onClick={logoutAction} className=\"ml-3\">Logout</Button>\n            </>\n          )}\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Navigation;","/var/www/html/fiverr_frontend/src/containers/service/service.tsx",["312","313","314"],"import React, {FunctionComponent, useCallback, useEffect, useState} from \"react\";\nimport {RouteComponentProps, useHistory} from \"react-router\";\nimport Layout from \"../layout/layout\";\nimport {Service as ServiceModel} from \"../../api/model/service\";\nimport {jsonRequest} from \"../../api/request/request\";\nimport {CREATE_THREAD, GET_SERVICE} from \"../../api/routing/routes/dashboard\";\nimport {\n  Button,\n  Col,\n  FormGroup,\n  Label,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Nav,\n  NavItem,\n  NavLink,\n  Row,\n  TabContent,\n  TabPane\n} from \"reactstrap/es\";\nimport {Image} from \"../../components/image/image\";\nimport classnames from 'classnames';\nimport {Package} from \"../../api/model/package\";\nimport {Seller} from \"../../api/model/seller\";\nimport {useForm} from \"react-hook-form\";\nimport {ValidationException} from \"../../api/exception/validation/validation.exception\";\nimport {ConstraintViolation} from \"../../lib/validator/validation.result\";\nimport {useSelector} from \"react-redux\";\nimport {getAuthorizedUser} from \"../../duck/auth/auth.selector\";\nimport {LOGIN, SINGLE_MESSAGE} from \"../../routes\";\n\nexport interface ServiceProps extends RouteComponentProps<{ id: string }> {\n\n}\n\nexport const Service: FunctionComponent<ServiceProps> = (props) => {\n  const [service, setService] = useState<ServiceModel>();\n  const [isLoading, setLoading] = useState(false);\n  const [isSendingMessage, setSendingMessage] = useState(false);\n  const [activeTab, setActiveTab] = useState(0);\n  const [modal, setModal] = useState(false);\n  const [modalType, setModalType] = useState('');\n  const [selectedSeller, setSelectedSeller] = useState<Seller | undefined>();\n  const [selectedService, setSelectedService] = useState<ServiceModel | undefined>();\n  const [selectedPackage, setSelectedPackage] = useState<Package | undefined>();\n  const [errorMessage, setErrorMessage] = useState<string | undefined>();\n  const {register, handleSubmit} = useForm();\n  \n  const toggleModal = () => setModal(!modal);\n  \n  const toggleTabs = (tab: number) => {\n    if (activeTab !== tab) setActiveTab(tab);\n  };\n  \n  const user = useSelector(getAuthorizedUser);\n  const history = useHistory();\n  \n  const loadService = async (id: string) => {\n    let response, list;\n    setLoading(true);\n    try {\n      response = await jsonRequest(`${GET_SERVICE.replace(':id', id)}`);\n      list = await response.json();\n    } catch (exception) {\n      // console.log(exception);\n    } finally {\n      setLoading(false);\n    }\n    \n    setService(list.service);\n  };\n  \n  useEffect(() => {\n    loadService(props.match.params.id);\n  }, [props.match.params.id]);\n  \n  const contactSeller = (sellerId: string) => {\n    setModalType('contact');\n  \n    setSelectedSeller(service?.seller);\n    setSelectedPackage(undefined);\n    setSelectedService(undefined);\n    \n    toggleModal();\n  };\n  \n  const createOrder = (seller: Seller, service: ServiceModel, pack: Package) => {\n    if(user !== null) {\n      setSelectedSeller(seller);\n      setSelectedPackage(pack);\n      setSelectedService(service);\n  \n      setModalType('contact');\n      toggleModal();\n    }else{\n      history.push(`${LOGIN}?ref=${props.match.path.replace(':id', service.id.toString())}`);\n    }\n  };\n  \n  const onSubmit = useCallback(async (values) => {\n    setSendingMessage(true);\n    try {\n      let response = await jsonRequest(CREATE_THREAD, {\n        body: JSON.stringify(values),\n        method: 'post'\n      });\n      \n      let json = await response.json();\n      history.push(SINGLE_MESSAGE.replace(':id', json.message.threadId));\n      \n      toggleModal();\n    } catch (exception) {\n      let exceptionResponse = await exception.response.json();\n      \n      if(exceptionResponse.message){\n        setErrorMessage(exceptionResponse.message);\n      }\n      \n      if (exceptionResponse.errorMessage) {\n        setErrorMessage(exceptionResponse.errorMessage);\n      }\n      \n      if (exceptionResponse.violations.length) {\n        setErrorMessage(exceptionResponse.violations.map((error: ConstraintViolation) => {\n          return `${error.propertyPath}: ${error.errorMessage}`;\n        }).join('<br/>'))\n      }\n    } finally {\n      setSendingMessage(false);\n    }\n  }, []);\n  \n  return (\n    <Layout isLoading={isLoading}>\n      <Row>\n        {service && (\n          <>\n            <Col md={8}>\n              <h1>{service.title}</h1>\n              <Image image={service.seller.profilePicture} h={36} w={36} fit=\"crop\" circle/>\n              {' '}{service?.seller.name}\n              <Row className=\"mt-3\">\n                <Col>\n                  {service.images.length > 0 && (\n                    <Image image={service.images[0]}/>\n                  )}\n                </Col>\n              </Row>\n              <Row className=\"mt-3\">\n                <Col>\n                  <h3>About Service</h3>\n                  <p>\n                    {service.description}\n                  </p>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <h3>About Seller</h3>\n                  <p>\n                    <Row>\n                      <Col className=\"col-3\">\n                        <Image image={service.seller.profilePicture} w={100}/>\n                      </Col>\n                      <Col>\n                        {service?.seller.name}\n                        <br/>\n                        <Button color=\"primary\" onClick={() => {\n                          contactSeller(service.seller.id.toString())\n                        }}>\n                          Contact me\n                        </Button>\n                      </Col>\n                    </Row>\n                  </p>\n                  <p>\n                    {service.seller.description}\n                  </p>\n                  \n                  <h3>Reviews</h3>\n                  <p className=\"p-5 text-center bg-dark text-light h5\">Nothing yet</p>\n                </Col>\n              </Row>\n            </Col>\n            <Col md={4}>\n              <div style={{position: 'sticky', top: '1rem'}}>\n                <Nav pills fill>\n                  {service.packages.map((pack: Package, index) => (\n                    <NavItem key={index}>\n                      <NavLink\n                        className={classnames({active: activeTab === index})}\n                        onClick={() => {\n                          toggleTabs(index);\n                        }}\n                      >\n                        {pack.name}\n                      </NavLink>\n                    </NavItem>\n                  ))}\n                </Nav>\n                <TabContent activeTab={activeTab}>\n                  {service.packages.map((pack: Package, index) => (\n                    <TabPane tabId={index} className=\"mt-5\" key={index}>\n                      <Row>\n                        <Col sm=\"12\">\n                          <h5 className=\"mb-5\">\n                            {pack.name}\n                            <span className=\"float-right\">${pack.price}</span>\n                          </h5>\n                          <p>{pack.description}</p>\n                          <p><i className=\"fa fa-clock\"></i> {pack.duration}</p>\n                          <ul>\n                            {pack.itemsIncluded.map(item => (\n                              <li>{item}</li>\n                            ))}\n                          </ul>\n                          <Button block color=\"success\" onClick={() =>\n                            createOrder(service.seller, service, pack)\n                          }>\n                            Continue (${pack.price})\n                          </Button>\n                        </Col>\n                      </Row>\n                    </TabPane>\n                  ))}\n                </TabContent>\n              </div>\n            </Col>\n          </>\n        )}\n      </Row>\n      <div>\n        <Modal isOpen={modal} toggle={toggleModal} size=\"lg\" fade={false} backdrop=\"static\">\n          <ModalHeader toggle={toggleModal}>To {selectedSeller && selectedSeller.name}</ModalHeader>\n          <form onSubmit={handleSubmit(onSubmit)} action={CREATE_THREAD} method={'POST'}>\n            <ModalBody>\n              {errorMessage && (\n                <div className=\"alert alert-danger\">{errorMessage}</div>\n              )}\n              {selectedService && selectedPackage && selectedSeller && (\n                <>\n                  <p>Service: {selectedService.title}</p>\n                  <p>Package: {selectedPackage.name}</p>\n                  <p>Price: ${selectedPackage.price}</p>\n                  <input type=\"hidden\" {...register('serviceId')} value={selectedService.id}/>\n                  <input type=\"hidden\" {...register('packageId')} value={selectedPackage.id}/>\n                  <input type=\"hidden\" {...register('sellerId')} value={selectedSeller.id}/>\n                </>\n              )}\n              <FormGroup>\n                <Label>Message</Label>\n                <textarea className=\"form-control\" {...register('message', {required: true})} />\n              </FormGroup>\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"success\" type=\"submit\" disabled={isSendingMessage}>Send Message</Button>\n            </ModalFooter>\n          </form>\n        </Modal>\n      </div>\n    </Layout>\n  );\n};","/var/www/html/fiverr_frontend/src/components/seller/seller.tsx",[],"/var/www/html/fiverr_frontend/src/components/image/image.tsx",["315"],"import React, {FunctionComponent} from 'react';\nimport {Media} from \"../../api/model/media\";\nimport {MEDIA_URL} from \"../../api/routing/routes/dashboard\";\nimport {QueryString} from \"../../lib/location/query.string\";\n\nexport interface ImageProps {\n    image?: Media;\n    h?: number;\n    w?: number;\n    fit?: \"crop\"|\"contain\"|\"max\"|\"fill\"|\"stretch\";\n    q?: number;\n    circle?: boolean;\n    default?: string;\n    fm?: \"webp\"|\"jpg\"|\"pjpg\"|\"png\"|\"gif\"\n}\n\nexport const Image: FunctionComponent<ImageProps> = ({image, h, w, q, fit, circle, default: defaultImage, fm}) => {\n    let id = 'default';\n    if(typeof image === 'object' && image !== null){\n        id = image?.id.toString();\n    }\n    \n    let query = QueryString.stringify({\n        q, w, h, fit, default: defaultImage, fm: fm || \"webp\"\n    });\n    \n    return (\n        <>\n            <img\n                src={`${MEDIA_URL.replace(':id', id)}?${query}`}\n                alt={image?.orgFileName}\n                className={`img-fluid${circle ? ' rounded-circle' : ''}`}\n            />\n        </>\n    );\n};\n","/var/www/html/fiverr_frontend/src/components/search/search.tsx",["316"],"import React, {FunctionComponent, useCallback, useMemo} from \"react\";\nimport {Form, FormGroup, Input} from \"reactstrap/es\";\nimport {SEARCH_ROUTE} from \"../../routes\";\nimport {useHistory, useLocation} from \"react-router\";\nimport {QueryString} from \"../../lib/location/query.string\";\nimport {useForm} from \"react-hook-form\";\n\n\nexport const Search: FunctionComponent = () => {\n\n    const location = useLocation();\n    const history = useHistory();\n    const {register, handleSubmit} = useForm();\n\n    const searchParams = useMemo(() => {\n        return QueryString.parse(location.search);\n    }, [location.search]);\n\n    const onSubmit = useCallback((values) => {\n        let qs = QueryString.stringify({...searchParams, s: values.s});\n        history.push(`${SEARCH_ROUTE}?${qs}`);\n    }, [searchParams]);\n\n    return (\n        <Form onSubmit={handleSubmit(onSubmit)} action={SEARCH_ROUTE}>\n            <FormGroup>\n                <Input\n                    type=\"search\"\n                    {...register('s')}\n                    placeholder=\"Search services...\"\n                    defaultValue={searchParams.s}\n                />\n            </FormGroup>\n        </Form>\n    );\n};","/var/www/html/fiverr_frontend/src/index.tsx",[],"/var/www/html/fiverr_frontend/src/store/store.factory.ts",[],"/var/www/html/fiverr_frontend/src/app.tsx",["317","318"],"/var/www/html/fiverr_frontend/src/duck/_root/root.reducer.ts",[],"/var/www/html/fiverr_frontend/src/duck/_root/root.saga.ts",[],"/var/www/html/fiverr_frontend/src/duck/entity/entity.middleware.ts",[],"/var/www/html/fiverr_frontend/src/duck/entity/entity.action.ts",[],"/var/www/html/fiverr_frontend/src/duck/app/app.reducer.ts",[],"/var/www/html/fiverr_frontend/src/duck/app/app.saga.ts",[],"/var/www/html/fiverr_frontend/src/duck/app/app.action.ts",[],"/var/www/html/fiverr_frontend/src/duck/app/app.state.ts",[],"/var/www/html/fiverr_frontend/src/duck/entity/entity.reducer.ts",[],"/var/www/html/fiverr_frontend/src/duck/entity/entity.state.ts",[],"/var/www/html/fiverr_frontend/src/duck/entity/entity.model.ts",[],"/var/www/html/fiverr_frontend/src/duck/auth/auth.reducer.ts",[],"/var/www/html/fiverr_frontend/src/duck/auth/auth.action.ts",[],"/var/www/html/fiverr_frontend/src/duck/auth/auth.state.ts",[],"/var/www/html/fiverr_frontend/src/duck/entity/entity.schema.ts",[],"/var/www/html/fiverr_frontend/src/duck/auth/auth.saga.ts",[],"/var/www/html/fiverr_frontend/src/api/api/account/info.ts",[],"/var/www/html/fiverr_frontend/src/api/exception/index.ts",[],"/var/www/html/fiverr_frontend/src/duck/auth/auth.selector.ts",[],"/var/www/html/fiverr_frontend/src/duck/app/app.selector.ts",[],"/var/www/html/fiverr_frontend/src/duck/auth/model/authorized.user.ts",[],"/var/www/html/fiverr_frontend/src/duck/entity/selector/user.account.ts",[],"/var/www/html/fiverr_frontend/src/duck/entity/selector/_entity.ts",[],"/var/www/html/fiverr_frontend/src/duck/auth/hooks/useLogout.ts",[],"/var/www/html/fiverr_frontend/src/containers/dashboard/dashboard.tsx",[],"/var/www/html/fiverr_frontend/src/containers/dashboard/inbox.tsx",["319","320","321","322","323","324","325","326","327"],"import React, {createRef, FunctionComponent, useCallback, useEffect, useState} from 'react';\nimport Layout from \"../layout/layout\";\nimport {RouteComponentProps} from \"react-router\";\nimport {jsonRequest, request} from \"../../api/request/request\";\nimport {\n  CREATE_OFFER,\n  MEDIA_DOWNLOAD_URL,\n  SEND_MESSAGE,\n  THREAD_MESSAGES,\n  THREADS_LIST\n} from \"../../api/routing/routes/dashboard\";\nimport {Thread} from \"../../api/model/thread\";\nimport {Message} from \"../../api/model/message\";\nimport {Link} from \"react-router-dom\";\nimport {SINGLE_MESSAGE} from \"../../routes\";\nimport {Image} from \"../../components/image/image\";\nimport {useForm} from \"react-hook-form\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPaperclip, faPaperPlane, faPencilAlt} from \"@fortawesome/free-solid-svg-icons\";\nimport TimeAgo from 'react-timeago'\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader, Row, Tooltip} from \"reactstrap/es\";\nimport {ConstraintViolation} from \"../../lib/validator/validation.result\";\nimport {useSelector} from \"react-redux\";\nimport {getAuthorizedUser} from \"../../duck/auth/auth.selector\";\nimport {ServiceShort} from \"../../components/service/service.short\";\nimport {Service} from \"../../api/model/service\";\nimport _ from 'lodash';\nimport { Offer } from '../../components/offer/offer';\n\nexport interface InboxProps extends RouteComponentProps<{ id: string }> {\n\n}\n\nexport const Inbox: FunctionComponent<InboxProps> = (props) => {\n  \n  const [threadList, setThreadList] = useState<Thread[]>([]);\n  const [isThreadsLoading, setIsThreadsLoading] = useState(false);\n  const [isMessagesLoading, setIsMessagesLoading] = useState(false);\n  const [activeThread, setActiveThread] = useState<Thread | undefined>();\n  const [messagesList, setMessagesList] = useState<Message[]>([]);\n  const listRef = createRef<HTMLDivElement>();\n  const [isMessageSending, setMessageSending] = useState(false);\n  const [uploadedFileName, setUploadedFileName] = useState('');\n  const [modal, setModal] = useState(false);\n  const toggleModal = () => setModal(!modal);\n  const user = useSelector(getAuthorizedUser);\n  const [offerService, setOfferService] = useState<Service | undefined>();\n  const [offerId, setOfferId] = useState<number | undefined>();\n  \n  //offer form handler\n  const {handleSubmit, register, setError, formState: {errors}, reset} = useForm();\n  //message form handler\n  const {handleSubmit: handleSubmitMessage, register: registerMessage, setError: setErrorMessage, formState: {errors: errorsMessage}, reset: resetMessage, clearErrors: clearErrorsMessage} = useForm();\n  \n  const loadThreadsList = async () => {\n    setIsThreadsLoading(true);\n    try {\n      let response = await jsonRequest(THREADS_LIST);\n      let threadList = await response.json();\n      \n      setThreadList(threadList.threads);\n    } catch (exception) {\n    \n    } finally {\n      setIsThreadsLoading(false);\n    }\n  };\n  \n  const loadMessagesList = async () => {\n    if (activeThread) {\n      setIsMessagesLoading(true);\n      try {\n        let response = await jsonRequest(THREAD_MESSAGES.replace(':id', activeThread?.id.toString()));\n        let messagesList = await response.json();\n        \n        setMessagesList(messagesList.messages);\n      } catch (exception) {\n      \n      } finally {\n        setIsMessagesLoading(false);\n      }\n    }\n  };\n  \n  useEffect(() => {\n    loadThreadsList();\n  }, []);\n  \n  useEffect(() => {\n    loadMessagesList();\n  }, [activeThread]);\n  \n  useEffect(() => {\n    let filterThread = threadList.filter(thread => thread.id.toString() === props.match.params.id);\n    if (filterThread.length > 0) {\n      setActiveThread(filterThread[0]);\n    } else {\n      if (threadList.length > 0) {\n        setActiveThread(threadList[0]);\n      }\n    }\n  }, [props.match.params.id, threadList]);\n  \n  const sendMessage = useCallback(async (values) => {\n    \n    if (!activeThread) {\n      return false;\n    }\n    \n    setMessageSending(true);\n    let queryString = new FormData();\n    if(values.message) {\n      queryString.append('message', values.message);\n    }\n    if(values.file) {\n      queryString.append('file', values.file[0]);\n    }\n    if(offerId){\n      queryString.append('offerId', offerId.toString());\n    }\n    \n    try {\n      let response = await request(SEND_MESSAGE.replace(':id', activeThread.id.toString()), {\n        body: queryString,\n        method: 'POST',\n      });\n      \n      let message = await response.json();\n      setMessagesList([...messagesList, message.message]);\n      scrollToBottom();\n      resetMessage({\n        message: ''\n      });\n      setOfferService(undefined);\n      setOfferId(undefined);\n    } catch (exception) {\n      let expResponse = await exception.response.json();\n      if (expResponse.code === 422) {\n        if (expResponse.violations) {\n          expResponse.violations.map((error: ConstraintViolation) => {\n            setErrorMessage(error.propertyPath, {\n              type: 'manual',\n              message: error.errorMessage\n            });\n          });\n        }\n      }\n      throw exception;\n    } finally {\n      setMessageSending(false);\n    }\n    \n  }, [messagesList, offerId]);\n  \n  useEffect(() => {\n    scrollToBottom();\n  }, [listRef, activeThread]);\n  \n  const scrollToBottom = useCallback(() => {\n    if (listRef.current) {\n      listRef.current.scrollTop = listRef.current.scrollHeight - listRef.current.clientHeight;\n    }\n  }, [listRef]);\n  \n  const [creatingOffer, setCreatingOffer] = useState(false);\n  \n  const onCreateOffer = useCallback(async (values) => {\n    setCreatingOffer(true);\n    \n    let queryString = JSON.stringify({\n      serviceId: values.serviceId,\n      price: +values.price,\n      description: values.description,\n      duration: values.delivery_duration\n    });\n    \n    try{\n      let response = await jsonRequest(CREATE_OFFER, {\n        method: 'POST',\n        body: queryString\n      });\n      let json = await response.json();\n  \n      await setOfferId(json.offer.id);\n      setModal(false);\n      setOfferService(undefined);\n      reset({\n        price: '',\n        description: '',\n        duration: ''\n      });\n  \n      clearErrorsMessage();\n    }catch(exception){\n      let expResponse = await exception.response.json();\n      if (expResponse.code === 422) {\n        if (expResponse.violations) {\n          expResponse.violations.map((error: ConstraintViolation) => {\n            setError(error.propertyPath, {\n              type: 'manual',\n              message: error.errorMessage\n            });\n          });\n        }\n      }\n    }finally{\n      setCreatingOffer(false);\n    }\n    \n  }, []);\n  \n  const [tooltipOpen, setTooltipOpen] = useState(false);\n  \n  const tooltipToggle = () => setTooltipOpen(!tooltipOpen);\n  \n  return (\n    <Layout>\n      <h1>Inbox</h1>\n      <div className=\"container-fluid inbox\">\n        <div className=\"row\">\n          <nav className=\"col-md-3 d-none d-md-block bg-light sidebar p-0\">\n            <div className=\"sidebar-sticky\">\n              <ul className=\"nav flex-column\">\n                {threadList.map((thread, index) => (\n                  <li className={`nav-item${thread === activeThread ? ' active' : ''}`}\n                    onClick={() => setActiveThread(thread)}\n                    key={index}>\n                    <Link to={SINGLE_MESSAGE.replace(':id', thread.id.toString())}\n                      className=\"nav-link contact-item\">\n                      <div className=\"thread-image-placeholder\">\n                        <Image image={thread.recipient.profilePicture}\n                          w={45}\n                          h={45}\n                          circle\n                          fit=\"crop\"\n                          default=\"profile\" />\n                      </div>\n                      <div className=\"thread-user-info\">\n                        <span className=\"ml-2\">{thread.recipient.displayName}</span>\n                        <span className=\"float-right thread-time\">\n                          <TimeAgo date={thread.message.createdAt} />\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n                        <div className=\"thread-latest-message\">\n                          <span className=\"ml-2\">{thread.message.message}</span>\n                        </div>\n                      </div>\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </nav>\n          <div className=\"col-md-9 p-0 message-header\">\n            {activeThread && (\n              <>\n                <div className=\"p-2 bg-light\">\n                  <div className=\"thread-image-placeholder\">\n                    <Image image={activeThread.recipient.profilePicture}\n                      w={45}\n                      h={45}\n                      circle\n                      fit=\"crop\"\n                      default=\"profile\" />\n                  </div>\n                  <div className=\"thread-user-info\">\n                    <span className=\"ml-2\">{activeThread.recipient.displayName}</span>\n                  </div>\n                </div>\n                <div className=\"messages-list\"\n                  ref={listRef}>\n                  {messagesList.map((message, index) => {\n                    let profilePicture = message.sender.profilePicture;\n                    let name = message.sender.displayName;\n                    return (\n                      <div key={index}\n                        className=\"message\">\n                        <div className=\"message-image-placeholder\">\n                          <Image image={profilePicture}\n                            w={45}\n                            h={45}\n                            circle\n                            fit=\"crop\"\n                            default=\"profile\" />\n                        </div>\n                        <div className=\"message-user-info\">\n                          <div className=\"\">\n                            {name}\n                            <TimeAgo date={message.createdAt}\n                              className=\"text-xs ml-2 text-black-50\" />\n                          </div>\n                          <div className=\"\">\n                            {message.message}\n                            {message.offer !== null && (\n                              <Offer offer={message.offer} onAccept={() => loadMessagesList()} onCancel={() => loadMessagesList()}/>\n                            )}\n                            <div>\n                              {message.media && message.media.map((image, idx) => (\n                                <React.Fragment key={idx}>\n                                  <a href={MEDIA_DOWNLOAD_URL.replace(':id', image.id.toString())}>\n                                    <Image image={image} h={100} />\n                                  </a>\n                                </React.Fragment>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"clearfix\"></div>\n                      </div>\n                    );\n                  })}\n                </div>\n                <div className=\"message-form\">\n                  <form method=\"POST\"\n                    onSubmit={handleSubmitMessage(sendMessage)}\n                    className=\"w-100\"\n                    autoComplete=\"off\"\n                  >\n                    <div className=\"input-group\">\n                      <input type=\"text\" {...registerMessage('message')}\n                        className=\"form-control border-primary shadow-none rounded-0\"\n                        placeholder=\"Enter something\"\n                        autoFocus />\n                      <div className=\"input-group-append\" title=\"Create offer\" id=\"offer-button\">\n                        <button type=\"button\" className=\"btn btn-outline-danger mb-0\" onClick={() => setModal(true)}>\n                          <FontAwesomeIcon icon={faPencilAlt} /> Offer\n                        </button>\n                      </div>\n                      <div className=\"input-group-append\" title={uploadedFileName}>\n                        <label className=\"file-picker btn btn-outline-primary mb-0\">\n                          <FontAwesomeIcon icon={faPaperclip} />\n                          <input type=\"file\" {...registerMessage('file')} />\n                        </label>\n                      </div>\n                      <div className=\"input-group-append\">\n                        <button className=\"btn btn-outline-success rounded-0\"\n                          type=\"submit\"\n                          disabled={isMessageSending}>\n                          <FontAwesomeIcon icon={faPaperPlane} />\n                        </button>\n                      </div>\n                      <Tooltip placement=\"top\" isOpen={tooltipOpen} target=\"offer-button\" toggle={tooltipToggle}>\n                        Create offer\n                      </Tooltip>\n                    </div>\n                    <div>{errorsMessage.message && (\n                      <div className=\"alert alert-danger\">{errorsMessage.message.message}</div>\n                    )}</div>\n                  </form>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <Modal isOpen={modal} toggle={toggleModal} size=\"lg\" fade={false} backdrop=\"static\">\n        <ModalHeader toggle={toggleModal}>Create offer</ModalHeader>\n        <form onSubmit={handleSubmit(onCreateOffer)} action={CREATE_OFFER}>\n          <ModalBody>\n            <h3>Select a service</h3>\n            <Row>\n              {user?.seller?.services.map((service, index) => (\n                <div className=\"col-6\" key={index}>\n                  <label\n                    className={`m-0 p-0 mb-2 text-left btn-service btn${service === offerService ? ' active' : ''}`}\n                    onClick={() => setOfferService(service)}\n                  >\n                    <input type=\"radio\" {...register('serviceId')} className=\"d-none\" value={service.id} />\n                    <ServiceShort service={service} />\n                  </label>\n                </div>\n              ))}\n            </Row>\n            {errors.serviceId && (\n              <div className=\"text-danger\">{errors.serviceId.message}</div>\n            )}\n            <div className=\"form-group\">\n              <label htmlFor=\"description\">Description</label>\n              <textarea id=\"description\" className=\"form-control\" {...register('description', {required: true})} />\n              {errors.description && (\n                <div className=\"text-danger\">{errors.description.message}</div>\n              )}\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"delivery-days\">Delivery days</label>\n              <select id=\"delivery-days\" className=\"form-control\" {...register('delivery_duration', {required: true})}>\n                {_.range(30).map((item, index) => (\n                  <option value={index + 1}>{index + 1}</option>\n                ))}\n              </select>\n              {errors.duration && (\n                <div className=\"text-danger\">{errors.duration.message}</div>\n              )}\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"price\">Price</label>\n              <input type=\"number\" className=\"form-control\" {...register('price', {required: true})} />\n              {errors.price && (\n                <div className=\"text-danger\">{errors.price.message}</div>\n              )}\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"success\" type=\"submit\" disabled={creatingOffer}>Create offer</Button>\n          </ModalFooter>\n        </form>\n      </Modal>\n    </Layout>\n  );\n};","/var/www/html/fiverr_frontend/src/containers/dashboard/orders.tsx",["328","329"],"/var/www/html/fiverr_frontend/src/containers/dashboard/earnings.tsx",[],"/var/www/html/fiverr_frontend/src/api/exception/validation/validation.exception.ts",[],"/var/www/html/fiverr_frontend/src/api/model/media.ts",[],["330","331"],"/var/www/html/fiverr_frontend/src/typings.d.ts",["332"],"import React from 'react';\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      'TimeAgoElement': any; // The 'any' just for testing purposes\n    }\n  }\n}","/var/www/html/fiverr_frontend/src/components/service/service.short.tsx",[],"/var/www/html/fiverr_frontend/src/components/offer/offer.tsx",[],"/var/www/html/fiverr_frontend/src/api/exception/validation/validation.exception.factory.ts",[],"/var/www/html/fiverr_frontend/src/containers/dashboard/order/order.tsx",["333"],{"ruleId":"334","replacedBy":"335"},{"ruleId":"336","replacedBy":"337"},{"ruleId":"334","replacedBy":"335"},{"ruleId":"336","replacedBy":"337"},{"ruleId":"338","severity":1,"message":"339","line":2,"column":15,"nodeType":"340","messageId":"341","endLine":2,"endColumn":24},{"ruleId":"338","severity":1,"message":"342","line":4,"column":8,"nodeType":"340","messageId":"341","endLine":4,"endColumn":18},{"ruleId":"338","severity":1,"message":"343","line":12,"column":9,"nodeType":"340","messageId":"341","endLine":12,"endColumn":19},{"ruleId":"338","severity":1,"message":"344","line":13,"column":9,"nodeType":"340","messageId":"341","endLine":13,"endColumn":18},{"ruleId":"345","severity":1,"message":"346","line":45,"column":8,"nodeType":"347","endLine":45,"endColumn":10,"suggestions":"348"},{"ruleId":"338","severity":1,"message":"349","line":8,"column":9,"nodeType":"340","messageId":"341","endLine":8,"endColumn":24},{"ruleId":"338","severity":1,"message":"350","line":19,"column":10,"nodeType":"340","messageId":"341","endLine":19,"endColumn":22},{"ruleId":"338","severity":1,"message":"351","line":19,"column":24,"nodeType":"340","messageId":"341","endLine":19,"endColumn":32},{"ruleId":"338","severity":1,"message":"352","line":7,"column":8,"nodeType":"340","messageId":"341","endLine":7,"endColumn":16},{"ruleId":"338","severity":1,"message":"353","line":8,"column":8,"nodeType":"340","messageId":"341","endLine":8,"endColumn":15},{"ruleId":"338","severity":1,"message":"354","line":11,"column":9,"nodeType":"340","messageId":"341","endLine":11,"endColumn":28},{"ruleId":"338","severity":1,"message":"355","line":13,"column":8,"nodeType":"340","messageId":"341","endLine":13,"endColumn":17},{"ruleId":"338","severity":1,"message":"356","line":14,"column":9,"nodeType":"340","messageId":"341","endLine":14,"endColumn":14},{"ruleId":"345","severity":1,"message":"357","line":71,"column":6,"nodeType":"347","endLine":71,"endColumn":20,"suggestions":"358"},{"ruleId":"338","severity":1,"message":"359","line":2,"column":21,"nodeType":"340","messageId":"341","endLine":2,"endColumn":34},{"ruleId":"338","severity":1,"message":"360","line":4,"column":26,"nodeType":"340","messageId":"341","endLine":4,"endColumn":39},{"ruleId":"338","severity":1,"message":"355","line":5,"column":5,"nodeType":"340","messageId":"341","endLine":5,"endColumn":14},{"ruleId":"338","severity":1,"message":"356","line":5,"column":16,"nodeType":"340","messageId":"341","endLine":5,"endColumn":21},{"ruleId":"338","severity":1,"message":"361","line":18,"column":10,"nodeType":"340","messageId":"341","endLine":18,"endColumn":21},{"ruleId":"338","severity":1,"message":"362","line":28,"column":9,"nodeType":"340","messageId":"341","endLine":28,"endColumn":28},{"ruleId":"338","severity":1,"message":"363","line":44,"column":10,"nodeType":"340","messageId":"341","endLine":44,"endColumn":19},{"ruleId":"345","severity":1,"message":"364","line":133,"column":6,"nodeType":"347","endLine":133,"endColumn":8,"suggestions":"365"},{"ruleId":"366","severity":1,"message":"367","line":29,"column":13,"nodeType":"368","endLine":33,"endColumn":15},{"ruleId":"345","severity":1,"message":"369","line":22,"column":8,"nodeType":"347","endLine":22,"endColumn":22,"suggestions":"370"},{"ruleId":"338","severity":1,"message":"361","line":48,"column":10,"nodeType":"340","messageId":"341","endLine":48,"endColumn":21},{"ruleId":"345","severity":1,"message":"371","line":57,"column":6,"nodeType":"347","endLine":57,"endColumn":8,"suggestions":"372"},{"ruleId":"338","severity":1,"message":"373","line":37,"column":10,"nodeType":"340","messageId":"341","endLine":37,"endColumn":26},{"ruleId":"338","severity":1,"message":"374","line":38,"column":10,"nodeType":"340","messageId":"341","endLine":38,"endColumn":27},{"ruleId":"338","severity":1,"message":"375","line":43,"column":28,"nodeType":"340","messageId":"341","endLine":43,"endColumn":47},{"ruleId":"345","severity":1,"message":"376","line":91,"column":6,"nodeType":"347","endLine":91,"endColumn":20,"suggestions":"377"},{"ruleId":"378","severity":1,"message":"379","line":140,"column":67,"nodeType":"380","messageId":"381","endLine":140,"endColumn":69},{"ruleId":"345","severity":1,"message":"382","line":153,"column":6,"nodeType":"347","endLine":153,"endColumn":29,"suggestions":"383"},{"ruleId":"345","severity":1,"message":"384","line":157,"column":6,"nodeType":"347","endLine":157,"endColumn":29,"suggestions":"385"},{"ruleId":"378","severity":1,"message":"379","line":198,"column":67,"nodeType":"380","messageId":"381","endLine":198,"endColumn":69},{"ruleId":"345","severity":1,"message":"386","line":210,"column":6,"nodeType":"347","endLine":210,"endColumn":8,"suggestions":"387"},{"ruleId":"338","severity":1,"message":"388","line":5,"column":9,"nodeType":"340","messageId":"341","endLine":5,"endColumn":18},{"ruleId":"338","severity":1,"message":"389","line":17,"column":9,"nodeType":"340","messageId":"341","endLine":17,"endColumn":18},{"ruleId":"334","replacedBy":"390"},{"ruleId":"336","replacedBy":"391"},{"ruleId":"338","severity":1,"message":"392","line":1,"column":8,"nodeType":"340","messageId":"341","endLine":1,"endColumn":13},{"ruleId":"338","severity":1,"message":"389","line":14,"column":10,"nodeType":"340","messageId":"341","endLine":14,"endColumn":19},"no-native-reassign",["393"],"no-negated-in-lhs",["394"],"@typescript-eslint/no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Navigation' is defined but never used.","'useHistory' is defined but never used.","'DASHBOARD' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["395"],"'CATEGORIES_LIST' is defined but never used.","'handleSubmit' is assigned a value but never used.","'register' is assigned a value but never used.","'Services' is defined but never used.","'Sellers' is defined but never used.","'RouteComponentProps' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","React Hook useEffect has a missing dependency: 'loadServices'. Either include it or remove the dependency array.",["396"],"'ListGroupItem' is defined but never used.","'SERVICES_LIST' is defined but never used.","'logoutState' is assigned a value but never used.","'ValidationException' is defined but never used.","'modalType' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'history' and 'toggleModal'. Either include them or remove the dependency array.",["397"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useCallback has a missing dependency: 'history'. Either include it or remove the dependency array.",["398"],"React Hook useEffect has missing dependencies: 'logoutAction' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["399"],"'isThreadsLoading' is assigned a value but never used.","'isMessagesLoading' is assigned a value but never used.","'setUploadedFileName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadMessagesList'. Either include it or remove the dependency array.",["400"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useCallback has missing dependencies: 'activeThread', 'resetMessage', 'scrollToBottom', and 'setErrorMessage'. Either include them or remove the dependency array.",["401"],"React Hook useEffect has a missing dependency: 'scrollToBottom'. Either include it or remove the dependency array.",["402"],"React Hook useCallback has missing dependencies: 'clearErrorsMessage', 'reset', and 'setError'. Either include them or remove the dependency array.",["403"],"'GET_ORDER' is defined but never used.","'isLoading' is assigned a value but never used.",["393"],["394"],"'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"404","fix":"405"},{"desc":"406","fix":"407"},{"desc":"408","fix":"409"},{"desc":"410","fix":"411"},{"desc":"412","fix":"413"},{"desc":"414","fix":"415"},{"desc":"416","fix":"417"},{"desc":"418","fix":"419"},{"desc":"420","fix":"421"},"Update the dependencies array to be: [dispatch]",{"range":"422","text":"423"},"Update the dependencies array to be: [loadServices, searchParams]",{"range":"424","text":"425"},"Update the dependencies array to be: [history, toggleModal]",{"range":"426","text":"427"},"Update the dependencies array to be: [history, searchParams]",{"range":"428","text":"429"},"Update the dependencies array to be: [logoutAction, props]",{"range":"430","text":"431"},"Update the dependencies array to be: [activeThread, loadMessagesList]",{"range":"432","text":"433"},"Update the dependencies array to be: [activeThread, messagesList, offerId, resetMessage, scrollToBottom, setErrorMessage]",{"range":"434","text":"435"},"Update the dependencies array to be: [listRef, activeThread, scrollToBottom]",{"range":"436","text":"437"},"Update the dependencies array to be: [clearErrorsMessage, reset, setError]",{"range":"438","text":"439"},[1522,1524],"[dispatch]",[2161,2175],"[loadServices, searchParams]",[4211,4213],"[history, toggleModal]",[787,801],"[history, searchParams]",[1913,1915],"[logoutAction, props]",[3464,3478],"[activeThread, loadMessagesList]",[5155,5178],"[activeThread, messagesList, offerId, resetMessage, scrollToBottom, setErrorMessage]",[5231,5254],"[listRef, activeThread, scrollToBottom]",[6635,6637],"[clearErrorsMessage, reset, setError]"]